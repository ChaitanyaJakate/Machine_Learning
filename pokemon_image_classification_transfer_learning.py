# -*- coding: utf-8 -*-
"""Pokemon_Image_Classification_Transfer_Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Pg2cOX_M8Ct3WobVeycoCQ3GPD00RKU
"""

import pandas as pd
import numpy as np

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d aaronyin/oneshotpokemon

import zipfile
zip_ref=zipfile.ZipFile('/content/oneshotpokemon.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow
from tensorflow import keras
from keras.layers import *
from keras import Sequential
from keras.applications import VGG16
from keras import initializers
from keras import regularizers
from keras.callbacks import EarlyStopping

conv_base=VGG16(
    weights='imagenet',
    include_top=False,
    input_shape=(150,150,3)
)

conv_base.summary()

model=Sequential()

model.add(conv_base)
model.add(Flatten())
model.add(Dense(128,activation='relu',kernel_initializer='he_normal'))
model.add(BatchNormalization())
model.add(Dense(64,activation='relu',kernel_initializer='he_normal'))
model.add(BatchNormalization())
model.add(Dense(32,activation='relu',kernel_initializer='he_normal'))
model.add(BatchNormalization())
model.add(Dense(3,activation='softmax'))

model.summary()

conv_base.trainable=False

model.summary()

train_dataset=keras.utils.image_dataset_from_directory(
    directory='/content/kaggle-one-shot-pokemon/kaggle-one-shot-pokemon',
    labels='inferred',
    label_mode='int',
    image_size=(150,150),
    batch_size=32,
    subset='training',
    validation_split=0.2,
    seed=42
)

val_dataset=keras.utils.image_dataset_from_directory(
    directory='/content/kaggle-one-shot-pokemon/kaggle-one-shot-pokemon',
    labels='inferred',
    label_mode='int',
    image_size=(150,150),
    batch_size=32,
    subset='validation',
    validation_split=0.2,
    seed=42
)

def process(image,label):
  image=tensorflow.cast(image/255, tensorflow.float32)
  return image,label
train_dataset=train_dataset.map(process)
val_dataset=val_dataset.map(process)

train_dataset

model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

history=model.fit(train_dataset,validation_data=(val_dataset),epochs=6,callbacks=EarlyStopping(patience=2,verbose=2,monitor='loss'))

import matplotlib.pyplot as plt

train_dataset.class_names

import os

dataset_dir = '/content/kaggle-one-shot-pokemon/pokemon-a'
classes = os.listdir(dataset_dir)
print(f"Number of Classes: {len(classes)}")
print(f"Classes: {classes}")

! pip install keras_tuner

import keras_tuner as kt

def  build_model(hp):
  model=Sequential()
  model.add(conv_base)
  model.add(Flatten())
  #units=hp.Int('units',min_value=8,max_value=128,step=8)
  model.add(Dense(128,activation='relu'))
  model.add(Dense(64,activation='relu',kernel_initializer='he_normal'))
  model.add(Dense(32,activation='relu',kernel_initializer='he_normal'))
  model.add(Dense(3,activation='softmax'))
  optimizer=hp.Choice('optimizer',values=['adam','rmsprop'])
  model.compile(loss='sparse_categorical_crossentropy',optimizer=optimizer,metrics=['accuracy'])
  return model

tuner=kt.RandomSearch(build_model,
                      objective='val_accuracy',
                      directory='firstdirec',
                      project_name='cnn1',
                      max_trials=2)

tuner.search(train_dataset,validation_data=(val_dataset),epochs=2)

tuner.get_best_hyperparameters()[0].values

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

import cv2

img=cv2.imread('/content/pikachu.jpg')

plt.imshow(img)

pok=cv2.resize(img,(150,150))

pikachu=pok.reshape((1,150,150,3))

model.predict(pikachu)

